<launch>

    <!--  ======================================================= ARGS + PARAMS ====================================================== -->



    <!-- TODO: You may want to change these arguments. Change nodeID also in the params.yaml file -->
    <arg name="nodeID" value="1" />

    <!-- Available options: Desktop | Raspberry | Testing_node -->
    <arg name="device" value="Raspberry" />
    
    <!-- Available resolutions 1920 x 1080, 1280 x 720 and 640 x 480  -->
    <arg name="w_res" value="1280" />
    <arg name="h_res" value="720" />
    <arg name="sel_camera" value="0"/>

    <!-- For Testing_node the rosbag file to play -->
    <arg name="bagfile" value="2021-10-31-10-25-26"/>

    <!-- Read parameters -->
    <rosparam command="load" file="$(find ros_drone_swarm_mocap)/config/params.yaml"/>



    <!--  ========================================================== CAMERA ========================================================== -->
    


    <!-- Camera node -->
    <node name="usb_cam_$(arg nodeID)" pkg="usb_cam" type="usb_cam_node" output="screen" >
        <param name="video_device" value="/dev/video$(arg sel_camera)" />

        <param name="framerate" value="30" />
        <param name="camera_frame_id" value="usb_cam" />
        <!-- <param name="auto_focus" value="false" /> -->
        <param name="io_method" value="mmap"/>
        <param name="camera_name" value="creative_livecam" />

        <!-- **************************************************** -->
        <!-- === With creative camera, better resolution === -->
        <param name="pixel_format" value="yuyv" />     
        <!-- === With creative camera, better framerate === -->
        <!-- <param name="pixel_format" value="mjpeg" />              -->
        <!-- **************************************************** -->

        <param name="camera_info_url" value="package://ros_drone_swarm_mocap/calibration/creative-$(arg w_res)x$(arg h_res).yaml" />
        <param name="image_width" value="$(arg w_res)" />
        <param name="image_height" value="$(arg h_res)" />
    </node>
    
    <!-- Camera undistortion -->
    <node name="image_proc_$(arg nodeID)" pkg="image_proc" type="image_proc" output="screen" ns="/usb_cam_$(arg nodeID)">
        <remap from="/usb_cam/image_raw" to="/usb_cam_$(arg nodeID)/image_raw"/>
        <remap from="/usb_cam/camera_info" to="/usb_cam_$(arg nodeID)/camera_info"/>
    </node>
    
    <!--    View camera to webpage     http://{NODE's IP}:8080     -->
    <node name="web_video_server_$(arg nodeID)" pkg="web_video_server" type="web_video_server" output="screen" />



    <!--  ======================================================= BUSINESS LOGIC ======================================================= -->



    <!-- Ball Detection -->
    <node name="worker_node_$(arg nodeID)" pkg="ros_drone_swarm_mocap" type="worker_node" output="screen"  /> <!-- for debug mode use: launch-prefix="gdb - -args"-->



    <!--  ========================================================== GPS + IMU ========================================================= -->



    <!-- RUN THESE NODES ONLY ON RASPBERRY. -->
    <group if="$(eval arg('device') == 'Raspberry')">
        <!-- IMU -->
        <node name="imu_$(arg nodeID)" pkg="adafruit_10dof_imu" type="imuout" output="screen">
            <remap from="/chatter" to="/chatter_$(arg nodeID)"/>
        </node>

        <!-- GPS -->
        <node name="nmea_serial_driver_$(arg nodeID)" pkg="nmea_navsat_driver"  type="nmea_serial_driver" output="screen">
            <param name="port" value="/dev/ttyS0" />
            <param name="baud" value="9600" />

            <remap from="/fix" to="/fix_$(arg nodeID)"/>
            <remap from="/heading" to="/heading_$(arg nodeID)"/>
            <remap from="/time_reference" to="/time_reference_$(arg nodeID)"/>
            <remap from="/vel" to="/vel_$(arg nodeID)"/>
        </node>
    </group>


    <!--  =========================================================== TFs ============================================================ -->


    <!-- args: "static_transform_publisher x y z yaw pitch roll frame_id child_frame_id" with rotations yaw: Z , pitch: Y, roll: X     -->
    <!-- <node name="imu_$(arg nodeID)_tf" pkg="tf2_ros" type="static_transform_publisher" args="0 0 0 120 120 120 world child"/> -->

    <!-- <node name="gps_$(arg nodeID)_tf" pkg="tf2_ros" type="static_transform_publisher" args=""/> -->

    <node name="navsat_$(arg nodeID)" pkg="robot_localization" type="navsat_transform_node" output="screen">
        <param name="" value=""/>

        <remap from="/imu/data" to="/chatter_$(arg nodeID)"/>
        <remap from="/gps/fix" to="/fix_$(arg nodeID)"/>
    </node>


    <node name="ekf_$(arg nodeID)" pkg="robot_localization" type="ekf_localization_node">
        <param name="frequency" value="30"/>

        <param name="" value=""/>
        <param name="" value=""/>
        <param name="" value=""/>
        <param name="" value=""/>
        <param name="" value=""/>
        <param name="" value=""/>
        
        <rosparam param="imu0_config">
            [   
                false, false, false,    <!--  x          , y            , z         --> 
                true, true, true,       <!--  roll       , pitch        , yaw       -->
                true, true, true,       <!--  x velo     , y velo       , z velo    -->
                true, true, true,       <!--  roll velo  , pitch velo   , yaw velo  -->
                false, false, false     <!--- x accel    , y accel      , z accel   -->
            ]
        </rosparam>
    </node>



    <!--  ========================================================== TESTING ========================================================= -->
    <!-- Use rosbag data to simulate gps and imu -->



    <group if="$(eval arg('device') == 'Testing_node')">
        <node name="testing_node_$(arg nodeID)" pkg="rosbag" type="play" args="--clock $(find ros_drone_swarm_mocap)/bags/$(arg bagfile).bag"/>
    </group>


</launch>
